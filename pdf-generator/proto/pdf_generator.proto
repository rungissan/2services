syntax = "proto3";

package pdfgenerator;

option go_package = "./proto";

// PDF Generator Service
service PDFGeneratorService {
    rpc GenerateReport(GenerateReportRequest) returns (GenerateReportResponse);
    rpc GetReportStatus(GetReportStatusRequest) returns (GetReportStatusResponse);
}

// Request to generate a PDF report
message GenerateReportRequest {
    string report_type = 1;
    string start_time = 2;
    string end_time = 3;
    repeated string metrics = 4;
    map<string, string> filters = 5;
}

// Response after generating a PDF report
message GenerateReportResponse {
    string report_id = 1;
    bytes pdf_data = 2;
    string filename = 3;
    bool success = 4;
    string error_message = 5;
}

// Request to get report generation status
message GetReportStatusRequest {
    string report_id = 1;
}

// Response with report generation status
message GetReportStatusResponse {
    string report_id = 1;
    ReportStatus status = 2;
    string error_message = 3;
    string filename = 4;
}

// Report generation status
enum ReportStatus {
    PENDING = 0;
    IN_PROGRESS = 1;
    COMPLETED = 2;
    FAILED = 3;
}

// Time series data point
message TimeSeriesData {
    int64 timestamp = 1;
    double value = 2;
    map<string, string> labels = 3;
}

// Chart data for PDF generation
message ChartData {
    string title = 1;
    string x_axis_label = 2;
    string y_axis_label = 3;
    repeated TimeSeriesData data_points = 4;
}
