// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/pdf_generator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PDFGeneratorService_GenerateReport_FullMethodName  = "/pdfgenerator.PDFGeneratorService/GenerateReport"
	PDFGeneratorService_GetReportStatus_FullMethodName = "/pdfgenerator.PDFGeneratorService/GetReportStatus"
)

// PDFGeneratorServiceClient is the client API for PDFGeneratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PDF Generator Service
type PDFGeneratorServiceClient interface {
	GenerateReport(ctx context.Context, in *GenerateReportRequest, opts ...grpc.CallOption) (*GenerateReportResponse, error)
	GetReportStatus(ctx context.Context, in *GetReportStatusRequest, opts ...grpc.CallOption) (*GetReportStatusResponse, error)
}

type pDFGeneratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPDFGeneratorServiceClient(cc grpc.ClientConnInterface) PDFGeneratorServiceClient {
	return &pDFGeneratorServiceClient{cc}
}

func (c *pDFGeneratorServiceClient) GenerateReport(ctx context.Context, in *GenerateReportRequest, opts ...grpc.CallOption) (*GenerateReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateReportResponse)
	err := c.cc.Invoke(ctx, PDFGeneratorService_GenerateReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDFGeneratorServiceClient) GetReportStatus(ctx context.Context, in *GetReportStatusRequest, opts ...grpc.CallOption) (*GetReportStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReportStatusResponse)
	err := c.cc.Invoke(ctx, PDFGeneratorService_GetReportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PDFGeneratorServiceServer is the server API for PDFGeneratorService service.
// All implementations must embed UnimplementedPDFGeneratorServiceServer
// for forward compatibility.
//
// PDF Generator Service
type PDFGeneratorServiceServer interface {
	GenerateReport(context.Context, *GenerateReportRequest) (*GenerateReportResponse, error)
	GetReportStatus(context.Context, *GetReportStatusRequest) (*GetReportStatusResponse, error)
	mustEmbedUnimplementedPDFGeneratorServiceServer()
}

// UnimplementedPDFGeneratorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPDFGeneratorServiceServer struct{}

func (UnimplementedPDFGeneratorServiceServer) GenerateReport(context.Context, *GenerateReportRequest) (*GenerateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReport not implemented")
}
func (UnimplementedPDFGeneratorServiceServer) GetReportStatus(context.Context, *GetReportStatusRequest) (*GetReportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportStatus not implemented")
}
func (UnimplementedPDFGeneratorServiceServer) mustEmbedUnimplementedPDFGeneratorServiceServer() {}
func (UnimplementedPDFGeneratorServiceServer) testEmbeddedByValue()                             {}

// UnsafePDFGeneratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PDFGeneratorServiceServer will
// result in compilation errors.
type UnsafePDFGeneratorServiceServer interface {
	mustEmbedUnimplementedPDFGeneratorServiceServer()
}

func RegisterPDFGeneratorServiceServer(s grpc.ServiceRegistrar, srv PDFGeneratorServiceServer) {
	// If the following call pancis, it indicates UnimplementedPDFGeneratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PDFGeneratorService_ServiceDesc, srv)
}

func _PDFGeneratorService_GenerateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDFGeneratorServiceServer).GenerateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PDFGeneratorService_GenerateReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDFGeneratorServiceServer).GenerateReport(ctx, req.(*GenerateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDFGeneratorService_GetReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDFGeneratorServiceServer).GetReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PDFGeneratorService_GetReportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDFGeneratorServiceServer).GetReportStatus(ctx, req.(*GetReportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PDFGeneratorService_ServiceDesc is the grpc.ServiceDesc for PDFGeneratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PDFGeneratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdfgenerator.PDFGeneratorService",
	HandlerType: (*PDFGeneratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateReport",
			Handler:    _PDFGeneratorService_GenerateReport_Handler,
		},
		{
			MethodName: "GetReportStatus",
			Handler:    _PDFGeneratorService_GetReportStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pdf_generator.proto",
}
