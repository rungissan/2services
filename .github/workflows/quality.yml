name: Code Quality & Documentation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  pages: write
  id-token: write

jobs:
  # Code quality analysis
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      # SonarCloud analysis (conditional on token availability)
      - name: Check SonarCloud Token
        id: sonar-check
        run: |
          if [ -z "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "SONAR_TOKEN is not set. Skipping SonarCloud analysis."
            echo "sonar-enabled=false" >> $GITHUB_OUTPUT
          else
            echo "SONAR_TOKEN is available. Running SonarCloud analysis."
            echo "sonar-enabled=true" >> $GITHUB_OUTPUT
          fi

      - name: SonarCloud Scan
        if: steps.sonar-check.outputs.sonar-enabled == 'true'
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=two-services
            -Dsonar.organization=rungissan
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/*.spec.ts,**/*.test.ts
            -Dsonar.tests=.
            -Dsonar.test.inclusions=**/*.spec.ts,**/*.test.ts
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: SonarCloud Setup Instructions
        if: steps.sonar-check.outputs.sonar-enabled == 'false'
        run: |
          echo "::notice title=SonarCloud Setup Required::To enable SonarCloud analysis, please:"
          echo "::notice::1. Go to https://sonarcloud.io and create an account"
          echo "::notice::2. Create a new project with key 'two-services' and organization 'rungissan'"
          echo "::notice::3. Generate a token at https://sonarcloud.io/account/security"
          echo "::notice::4. Add the token as 'SONAR_TOKEN' secret in your GitHub repository settings"

      # Generate test coverage
      - name: Generate coverage report
        run: |
          npx nx run-many -t test --coverage

          # Create combined coverage directory
          mkdir -p coverage

          # Check what coverage files exist
          echo "=== Coverage files found ==="
          find . -name "lcov.info" | grep -v node_modules | head -10

          # Combine LCOV files from both services
          if [ -f "serviceA/test-output/jest/coverage/lcov.info" ] && [ -f "serviceB/test-output/jest/coverage/lcov.info" ]; then
            echo "=== Combining LCOV files ==="
            cat serviceA/test-output/jest/coverage/lcov.info serviceB/test-output/jest/coverage/lcov.info > coverage/lcov.info
            echo "‚úÖ Combined coverage report created"
            echo "ServiceA coverage lines: $(wc -l < serviceA/test-output/jest/coverage/lcov.info)"
            echo "ServiceB coverage lines: $(wc -l < serviceB/test-output/jest/coverage/lcov.info)"
            echo "Combined coverage lines: $(wc -l < coverage/lcov.info)"
          elif [ -f "serviceA/test-output/jest/coverage/lcov.info" ]; then
            echo "=== Using ServiceA coverage only ==="
            cp serviceA/test-output/jest/coverage/lcov.info coverage/lcov.info
          elif [ -f "serviceB/test-output/jest/coverage/lcov.info" ]; then
            echo "=== Using ServiceB coverage only ==="
            cp serviceB/test-output/jest/coverage/lcov.info coverage/lcov.info
          else
            echo "‚ö†Ô∏è No LCOV files found, creating empty coverage report"
            touch coverage/lcov.info
          fi

          # Verify the combined file
          if [ -f "coverage/lcov.info" ]; then
            echo "Final coverage file size: $(wc -l < coverage/lcov.info) lines"
          fi

      - name: Upload coverage to Codecov
        if: env.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          verbose: true
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Coverage upload status
        run: |
          if [ -z "${{ secrets.CODECOV_TOKEN }}" ]; then
            echo "‚ö†Ô∏è  CODECOV_TOKEN not configured. Coverage was not uploaded to Codecov."
            echo "To enable Codecov uploads:"
            echo "1. Sign up at https://codecov.io"
            echo "2. Get your repository upload token"
            echo "3. Add it as CODECOV_TOKEN secret in your GitHub repository settings"
          else
            echo "‚úÖ Codecov upload attempted with authentication token"
          fi

      # Code complexity analysis
      - name: Analyze code complexity
        run: |
          npm install -g complexity-report

          echo "=== Code Complexity Report ===" > complexity-report.txt
          echo "" >> complexity-report.txt

          # Analyze TypeScript files
          find . -name "*.ts" -not -path "./node_modules/*" -not -path "./dist/*" -not -path "./.nx/*" | head -20 | while read file; do
            echo "File: $file" >> complexity-report.txt
            cr "$file" --format json 2>/dev/null | jq -r '.reports[0] | "  Complexity: \(.complexity.cyclomatic), Functions: \(.functions | length)"' >> complexity-report.txt 2>/dev/null || echo "  Could not analyze" >> complexity-report.txt
            echo "" >> complexity-report.txt
          done

      # Go code quality
      - name: Go code quality checks
        working-directory: ./pdf-generator
        run: |
          # Install Go quality tools
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
          go install github.com/gordonklaus/ineffassign@latest

          echo "=== Go Code Quality Report ===" > ../go-quality-report.txt
          echo "" >> ../go-quality-report.txt

          # Run staticcheck
          echo "## Staticcheck Results:" >> ../go-quality-report.txt
          staticcheck ./... 2>&1 | tee -a ../go-quality-report.txt || true
          echo "" >> ../go-quality-report.txt

          # Run gocyclo
          echo "## Cyclomatic Complexity:" >> ../go-quality-report.txt
          gocyclo -over 10 . 2>&1 | tee -a ../go-quality-report.txt || true
          echo "" >> ../go-quality-report.txt

          # Run ineffassign
          echo "## Inefficient Assignments:" >> ../go-quality-report.txt
          ineffassign . 2>&1 | tee -a ../go-quality-report.txt || true

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: |
            complexity-report.txt
            go-quality-report.txt
            coverage/

  # Documentation generation
  documentation:
    runs-on: ubuntu-latest
    name: Generate Documentation

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps      # Generate TypeScript documentation
      - name: Generate TypeDoc documentation
        run: |
          npm install -g typedoc typescript

          echo "=== Generating TypeScript Documentation ==="

          # Generate documentation for shared library
          echo "üìö Generating shared library documentation..."
          typedoc --options typedoc-shared.json || {
            echo "‚ö†Ô∏è  Shared library documentation failed, trying fallback..."
            typedoc --tsconfig shared/tsconfig.json --out docs/shared shared/index.ts --skipErrorChecking
          }

          # Generate documentation for serviceA
          echo "üìö Generating serviceA documentation..."
          typedoc --options typedoc-serviceA.json || {
            echo "‚ö†Ô∏è  ServiceA documentation failed, trying fallback..."
            typedoc --tsconfig serviceA/tsconfig.app.json --out docs/serviceA serviceA/src/main.ts --includeVersion --skipErrorChecking
          }

          # Generate documentation for serviceB (with error tolerance)
          echo "üìö Generating serviceB documentation..."
          typedoc --options typedoc-serviceB.json --skipErrorChecking || {
            echo "‚ö†Ô∏è  ServiceB documentation failed, trying fallback..."
            typedoc --tsconfig serviceB/tsconfig.app.json --out docs/serviceB serviceB/src/main.ts --includeVersion --skipErrorChecking || {
              echo "‚ùå ServiceB documentation generation failed, skipping..."
              mkdir -p docs/serviceB
              echo "<h1>ServiceB Documentation</h1><p>Documentation generation failed due to TypeScript errors. Please fix the errors and regenerate.</p>" > docs/serviceB/index.html
            }
          }

          echo "‚úÖ TypeDoc documentation generation completed"

      # Generate Go documentation
      - name: Generate Go documentation
        run: |
          # Install godoc
          go install golang.org/x/tools/cmd/godoc@latest

          # Generate Go documentation
          cd pdf-generator
          go doc -all > ../docs/pdf-generator.md

      # Generate API documentation
      - name: Generate OpenAPI documentation
        run: |
          npm install -g @apidevtools/swagger-parser

          # Create OpenAPI documentation structure
          mkdir -p docs/api

          # Generate API docs for each service
          cat > docs/api/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Two Services API Documentation</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; }
              .service { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
              h1 { color: #333; }
              h2 { color: #666; }
              .endpoint { margin: 10px 0; padding: 10px; background: #f5f5f5; border-radius: 3px; }
              .method { font-weight: bold; color: #0066cc; }
            </style>
          </head>
          <body>
            <h1>Two Services API Documentation</h1>

            <div class="service">
              <h2>ServiceA - Data Ingestion & Processing (Port 3001)</h2>
              <div class="endpoint">
                <span class="method">GET</span> /api/health - Health check
              </div>
              <div class="endpoint">
                <span class="method">POST</span> /api/upload - File upload (JSON/Excel)
              </div>
              <div class="endpoint">
                <span class="method">GET</span> /api/search - Search MongoDB data
              </div>
              <div class="endpoint">
                <span class="method">POST</span> /api/stream - Stream data processing
              </div>
              <div class="endpoint">
                <span class="method">POST</span> /api/data - Store data in MongoDB
              </div>
              <div class="endpoint">
                <span class="method">GET</span> /api/data - Retrieve data from MongoDB
              </div>
              <div class="endpoint">
                <span class="method">POST</span> /api/events - Publish events to Redis Pub/Sub
              </div>
            </div>

            <div class="service">
              <h2>ServiceB - Logging & Reporting (Port 3002)</h2>
              <div class="endpoint">
                <span class="method">GET</span> /api/health - Health check
              </div>
              <div class="endpoint">
                <span class="method">POST</span> /api/metrics - Store time-series data
              </div>
              <div class="endpoint">
                <span class="method">GET</span> /api/metrics - Retrieve time-series data
              </div>
              <div class="endpoint">
                <span class="method">POST</span> /api/cache - Cache operations
              </div>
              <div class="endpoint">
                <span class="method">GET</span> /api/logs - Query event logs
              </div>
              <div class="endpoint">
                <span class="method">POST</span> /reports/generate - Generate PDF report (sync)
              </div>
              <div class="endpoint">
                <span class="method">POST</span> /reports/generate-async - Generate PDF report (async)
              </div>
              <div class="endpoint">
                <span class="method">GET</span> /reports/status/:reportId - Get report status
              </div>
            </div>

            <div class="service">
              <h2>PDF Generator - gRPC Service (Port 50051)</h2>
              <div class="endpoint">
                <span class="method">gRPC</span> GenerateReport - Generate PDF from time-series data
              </div>
              <div class="endpoint">
                <span class="method">gRPC</span> GetReportStatus - Get report generation status
              </div>
            </div>
          </body>
          </html>
          EOF

      # Check documentation links
      - name: Check documentation links
        run: |
          npm install -g markdown-link-check

          # Check all markdown files for broken links
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./dist/*" | while read file; do
            echo "Checking links in $file"
            markdown-link-check "$file" --config .github/markdown-link-check.json || true
          done

      - name: Create link check config
        run: |
          mkdir -p .github
          cat > .github/markdown-link-check.json << 'EOF'
          {
            "ignorePatterns": [
              {
                "pattern": "^http://localhost"
              },
              {
                "pattern": "^https://localhost"
              }
            ],
            "timeout": "5s",
            "retryOn429": true,
            "retryCount": 3,
            "fallbackRetryDelay": "30s",
            "aliveStatusCodes": [200, 206]
          }
          EOF

      # Deploy documentation to GitHub Pages
      - name: Check if Pages is enabled
        if: github.ref == 'refs/heads/main'
        id: pages-check
        run: |
          # Check if we can access the Pages API
          RESPONSE=$(curl -s -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pages" \
            -o /tmp/pages_response.json)

          if [ "$RESPONSE" = "200" ]; then
            echo "pages-enabled=true" >> $GITHUB_OUTPUT
            echo "‚úÖ GitHub Pages is enabled and configured"
          else
            echo "pages-enabled=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  GitHub Pages is not enabled or not configured for GitHub Actions"
            echo "HTTP Response Code: $RESPONSE"
            cat /tmp/pages_response.json 2>/dev/null || echo "No response body"
          fi

      - name: Setup Pages
        if: github.ref == 'refs/heads/main' && steps.pages-check.outputs.pages-enabled == 'true'
        uses: actions/configure-pages@v4
        continue-on-error: true

      - name: Upload documentation artifact
        if: github.ref == 'refs/heads/main' && steps.pages-check.outputs.pages-enabled == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs
        continue-on-error: true

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && steps.pages-check.outputs.pages-enabled == 'true'
        id: deployment
        uses: actions/deploy-pages@v4
        continue-on-error: true

      - name: Pages setup instructions
        if: github.ref == 'refs/heads/main' && steps.pages-check.outputs.pages-enabled == 'false'
        run: |
          echo "::notice title=GitHub Pages Setup Required::To enable documentation deployment, please:"
          echo "::notice::1. Go to your repository Settings ‚Üí Pages"
          echo "::notice::2. Under 'Source', select 'GitHub Actions'"
          echo "::notice::3. Click 'Save'"
          echo "::notice::4. Re-run this workflow to deploy documentation"
          echo "::notice::Repository URL: https://github.com/${{ github.repository }}/settings/pages"

          echo "üìù Documentation has been generated but not deployed due to Pages configuration."
          echo "Please enable GitHub Pages with 'GitHub Actions' as the source to deploy documentation."

      - name: Upload documentation as artifact (fallback)
        if: github.ref == 'refs/heads/main' && steps.pages-check.outputs.pages-enabled == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: ./docs
          retention-days: 30

      - name: Comment PR with documentation links
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üìö Documentation Updated

            The documentation has been generated for this PR:

            - **TypeScript Docs**: Generated with TypeDoc
            - **Go Docs**: Generated for PDF generator service
            - **API Docs**: Available in docs/api/

            ${process.env.GITHUB_REF === 'refs/heads/main' ?
              'The documentation will be automatically deployed to GitHub Pages when this PR is merged to main.' :
              'Documentation artifacts are available for download from the workflow run.'}

            > **Note**: If GitHub Pages deployment fails, make sure Pages is enabled in repository settings with "GitHub Actions" as the source.

            > **Setup URL**: https://github.com/${{ github.repository }}/settings/pages

            > **Tip**: Make sure to update relevant documentation files when making significant changes!
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Accessibility and SEO checks (if applicable)
  accessibility:
    runs-on: ubuntu-latest
    name: Accessibility & Standards Check
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check README and documentation quality
        run: |
          npm install -g alex write-good

          echo "=== Documentation Quality Report ===" > doc-quality-report.txt
          echo "" >> doc-quality-report.txt

          # Check for inclusive language
          echo "## Inclusive Language Check:" >> doc-quality-report.txt
          alex README.md 2>&1 | tee -a doc-quality-report.txt || true
          echo "" >> doc-quality-report.txt

          # Check writing quality
          echo "## Writing Quality Check:" >> doc-quality-report.txt
          write-good README.md 2>&1 | tee -a doc-quality-report.txt || true
          echo "" >> doc-quality-report.txt

      - name: Check file structure and naming conventions
        run: |
          echo "=== File Structure Report ===" > file-structure-report.txt
          echo "" >> file-structure-report.txt

          # Check for consistent naming
          echo "## Inconsistent File Naming:" >> file-structure-report.txt
          find . -name "*.ts" -not -path "./node_modules/*" | grep -E "[A-Z]" | head -10 >> file-structure-report.txt || echo "No inconsistent TypeScript file naming found" >> file-structure-report.txt
          echo "" >> file-structure-report.txt

          # Check for large files
          echo "## Large Files (>1MB):" >> file-structure-report.txt
          find . -type f -size +1M -not -path "./node_modules/*" -not -path "./.git/*" | head -10 >> file-structure-report.txt || echo "No large files found" >> file-structure-report.txt
          echo "" >> file-structure-report.txt

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-reports
          path: |
            doc-quality-report.txt
            file-structure-report.txt
