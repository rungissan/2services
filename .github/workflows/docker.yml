name: Docker Build & Push

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [serviceA, serviceB, pdf-generator]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          echo "=== Freeing up disk space ==="
          docker system prune -f || echo "Docker prune failed, continuing..."
          df -h

      - name: Setup Node.js (for ServiceA/ServiceB builds)
        if: matrix.service == 'serviceA' || matrix.service == 'serviceB'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies (for ServiceA/ServiceB)
        if: matrix.service == 'serviceA' || matrix.service == 'serviceB'
        run: npm ci --legacy-peer-deps

      - name: Build Node.js services
        if: matrix.service == 'serviceA' || matrix.service == 'serviceB'
        run: |
          echo "Building ${{ matrix.service }}..."
          npx nx build ${{ matrix.service }}

          # Verify the build output exists
          if [ ! -d "${{ matrix.service }}/dist" ]; then
            echo "❌ Build failed: ${{ matrix.service }}/dist directory not found"
            exit 1
          fi

          echo "✅ Build successful: ${{ matrix.service }}/dist directory created"
          ls -la ${{ matrix.service }}/dist/

      - name: Pre-pull buildkit image and setup Docker
        run: |
          echo "=== Pre-pulling buildkit image to avoid bootstrap timeout ==="
          # Pre-pull the buildkit image that causes the timeout
          docker pull moby/buildkit:buildx-stable-1 || {
            echo "⚠️  Failed to pre-pull buildkit image, continuing anyway..."
          }

          echo "=== Docker system info ==="
          docker info

          echo "=== Cleaning up Docker resources ==="
          docker system prune -f || echo "Docker prune failed, continuing..."

          echo "=== Available resources after cleanup ==="
          df -h
          free -h || echo "free command not available"

      - name: Set up Docker Buildx (Optimized)
        id: buildx-setup
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container
        continue-on-error: true

      - name: Set up Docker Buildx (Simple Container)
        id: buildx-setup-simple
        if: steps.buildx-setup.outcome == 'failure'
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container
        continue-on-error: true

      - name: Set up Docker Buildx (Fallback without cache)
        id: buildx-setup-fallback
        if: steps.buildx-setup.outcome == 'failure' && steps.buildx-setup-simple.outcome == 'failure'
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker

      - name: Diagnose Final Buildx Setup
        run: |
          echo "=== Final Buildx Status ==="
          docker buildx version
          docker buildx ls

          # Test buildx functionality
          echo "=== Testing buildx functionality ==="
          docker buildx inspect --bootstrap || {
            echo "❌ Buildx setup failed completely"
            exit 1
          }

          # Check which driver is being used
          DRIVER=$(docker buildx inspect | grep "Driver:" | head -1 | awk '{print $2}')
          echo "BUILDX_DRIVER=$DRIVER" >> $GITHUB_ENV

          # Check which setup step succeeded
          if [ "${{ steps.buildx-setup.outcome }}" = "success" ]; then
            echo "✅ Optimized container driver setup succeeded"
            echo "SETUP_METHOD=optimized" >> $GITHUB_ENV
          elif [ "${{ steps.buildx-setup-simple.outcome }}" = "success" ]; then
            echo "✅ Simple container driver setup succeeded"
            echo "SETUP_METHOD=simple" >> $GITHUB_ENV
          elif [ "${{ steps.buildx-setup-fallback.outcome }}" = "success" ]; then
            echo "⚠️  Fallback docker driver setup succeeded"
            echo "SETUP_METHOD=fallback" >> $GITHUB_ENV
          fi

          if [ "$DRIVER" = "docker-container" ]; then
            echo "✅ Container driver active - GitHub Actions cache supported"
            echo "CACHE_SUPPORTED=true" >> $GITHUB_ENV
          else
            echo "⚠️  Docker driver active - GitHub Actions cache not supported"
            echo "CACHE_SUPPORTED=false" >> $GITHUB_ENV
          fi

          echo "✅ Buildx is working correctly"

          echo "=== Final system resources ==="
          df -h
          free -h || echo "free command not available"

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase service name and repository
        id: service-name
        run: |
          echo "service_lower=$(echo '${{ matrix.service }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "repo_lower=$(echo '${{ env.IMAGE_NAME_PREFIX }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.service-name.outputs.repo_lower }}/${{ steps.service-name.outputs.service_lower }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-

      # Build Node.js services
      - name: Build and push ServiceA/ServiceB (multi-platform with cache)
        if: (matrix.service == 'serviceA' || matrix.service == 'serviceB') && env.CACHE_SUPPORTED == 'true'
        id: nodejs-build-multi-cache
        continue-on-error: true
        uses: docker/build-push-action@v5
        timeout-minutes: 25
        with:
          context: .
          file: ${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ steps.service-name.outputs.repo_lower }}/${{ matrix.service }}:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ steps.service-name.outputs.repo_lower }}/${{ matrix.service }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build and push ServiceA/ServiceB (multi-platform without cache)
        if: (matrix.service == 'serviceA' || matrix.service == 'serviceB') && (env.CACHE_SUPPORTED == 'false' || steps.nodejs-build-multi-cache.outcome == 'failure')
        id: nodejs-build-multi-no-cache
        continue-on-error: true
        uses: docker/build-push-action@v5
        timeout-minutes: 25
        with:
          context: .
          file: ${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ steps.service-name.outputs.repo_lower }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ steps.service-name.outputs.repo_lower }}/${{ matrix.service }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build and push ServiceA/ServiceB (fallback single-platform)
        if: (matrix.service == 'serviceA' || matrix.service == 'serviceB') && steps.nodejs-build-multi-cache.outcome == 'failure' && steps.nodejs-build-multi-no-cache.outcome == 'failure'
        uses: docker/build-push-action@v5
        timeout-minutes: 20
        with:
          context: .
          file: ${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Build Go PDF Generator
      - name: Setup Go (for PDF Generator)
        if: matrix.service == 'pdf-generator'
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Verify PDF Generator build
        if: matrix.service == 'pdf-generator'
        run: |
          cd pdf-generator
          echo "=== Go version and environment ==="
          go version
          echo "=== Verifying Go modules ==="
          go mod tidy
          go mod verify
          echo "=== Testing Go build ==="
          go build -v .
          echo "✅ PDF Generator builds successfully"

      - name: Build and push PDF Generator (multi-platform with cache)
        if: matrix.service == 'pdf-generator' && env.CACHE_SUPPORTED == 'true'
        id: pdf-build-multi-cache
        continue-on-error: true
        uses: docker/build-push-action@v5
        timeout-minutes: 25
        with:
          context: ./pdf-generator
          file: ./pdf-generator/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ steps.service-name.outputs.repo_lower }}/${{ matrix.service }}:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ steps.service-name.outputs.repo_lower }}/${{ matrix.service }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build and push PDF Generator (multi-platform without cache)
        if: matrix.service == 'pdf-generator' && (env.CACHE_SUPPORTED == 'false' || steps.pdf-build-multi-cache.outcome == 'failure')
        id: pdf-build-multi-no-cache
        continue-on-error: true
        uses: docker/build-push-action@v5
        timeout-minutes: 25
        with:
          context: ./pdf-generator
          file: ./pdf-generator/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ steps.service-name.outputs.repo_lower }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ steps.service-name.outputs.repo_lower }}/${{ matrix.service }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build and push PDF Generator (fallback single-platform)
        if: matrix.service == 'pdf-generator' && steps.pdf-build-multi-cache.outcome == 'failure' && steps.pdf-build-multi-no-cache.outcome == 'failure'
        uses: docker/build-push-action@v5
        timeout-minutes: 20
        with:
          context: ./pdf-generator
          file: ./pdf-generator/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Test Docker images
  test-images:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request'

    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install testing tools
        run: |
          # Install MongoDB Shell
          curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor
          echo "deb [ signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh redis-tools

      - name: Test with Docker Compose
        run: |
          # Create test environment file
          cat > .env.test << EOF
          NODE_ENV=test
          # MongoDB configuration
          MONGO_HOST=localhost
          MONGO_PORT=27017
          MONGO_USERNAME=admin
          MONGO_PASSWORD=password
          MONGO_DATABASE=two-services-test
          MONGO_AUTH_SOURCE=admin
          MONGO_CONNECTION_STRING=mongodb://admin:password@localhost:27017/two-services-test?authSource=admin
          # Redis configuration (all using the same Redis instance for testing)
          REDIS_HOST=localhost
          REDIS_PORT=6379
          REDIS_PASSWORD=
          REDIS_DB=0
          REDIS_CONNECTION_STRING=redis://localhost:6379/0
          # Redis TimeSeries (using same Redis instance)
          REDIS_TIMESERIES_HOST=localhost
          REDIS_TIMESERIES_PORT=6379
          REDIS_TIMESERIES_PASSWORD=
          REDIS_TIMESERIES_DB=1
          REDIS_TIMESERIES_CONNECTION_STRING=redis://localhost:6379/1
          # Redis PubSub (using same Redis instance)
          REDIS_PUBSUB_HOST=localhost
          REDIS_PUBSUB_PORT=6379
          REDIS_PUBSUB_PASSWORD=
          REDIS_PUBSUB_DB=2
          REDIS_PUBSUB_CONNECTION_STRING=redis://localhost:6379/2
          EOF

          # Test the services can start
          echo "=== Testing Docker Compose configuration ==="
          docker-compose -f docker-compose.yml config
          echo "✅ Docker Compose configuration is valid"

          echo "=== Testing environment configuration ==="
          # Source the test environment
          set -a
          source .env.test
          set +a

          # Test MongoDB connection
          echo "Testing MongoDB connection..."
          timeout 30s bash -c 'until mongosh "$MONGO_CONNECTION_STRING" --eval "db.runCommand({ping: 1})" --quiet; do sleep 1; done' || {
            echo "❌ MongoDB connection test failed"
            exit 1
          }
          echo "✅ MongoDB connection successful"

          # Test Redis connection
          echo "Testing Redis connections..."
          redis-cli -h localhost -p 6379 ping || {
            echo "❌ Redis connection test failed"
            exit 1
          }
          echo "✅ Redis connection successful"

  # Vulnerability scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:
      matrix:
        service: [serviceA, serviceB, pdf-generator]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase service name and repository
        id: service-name
        run: |
          echo "service_lower=$(echo '${{ matrix.service }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "repo_lower=$(echo '${{ env.IMAGE_NAME_PREFIX }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Debug image information
        run: |
          IMAGE_REF="${{ env.REGISTRY }}/${{ steps.service-name.outputs.repo_lower }}/${{ steps.service-name.outputs.service_lower }}:main"
          echo "=== Image Information ==="
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Repository: ${{ steps.service-name.outputs.repo_lower }}"
          echo "Service: ${{ steps.service-name.outputs.service_lower }}"
          echo "Full image reference: $IMAGE_REF"
          echo "GitHub repository: ${{ github.repository }}"

          echo "=== Attempting to verify image existence ==="
          # Try to pull the image to verify it exists
          if docker pull "$IMAGE_REF"; then
            echo "✅ Successfully pulled image: $IMAGE_REF"
            docker images | grep "${{ steps.service-name.outputs.service_lower }}" || echo "No matching images found in local registry"
          else
            echo "❌ Failed to pull image: $IMAGE_REF"
            echo "This could be because:"
            echo "1. The image doesn't exist"
            echo "2. Authentication failed"
            echo "3. The build job failed to push the image"
            echo "4. There's a timing issue"
            exit 1
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.service-name.outputs.repo_lower }}/${{ steps.service-name.outputs.service_lower }}:main
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
          timeout: '15m'
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Run Trivy vulnerability scanner (fallback with manual setup)
        if: failure()
        run: |
          # Install Trivy manually as fallback
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

          IMAGE_REF="${{ env.REGISTRY }}/${{ steps.service-name.outputs.repo_lower }}/${{ steps.service-name.outputs.service_lower }}:main"
          echo "Running Trivy scan manually on: $IMAGE_REF"

          trivy image --format sarif --output trivy-results-${{ matrix.service }}-fallback.sarif "$IMAGE_REF" || {
            echo "Manual Trivy scan also failed. This likely means the image reference is invalid or the image doesn't exist."
            exit 1
          }

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab (fallback)
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}-fallback.sarif'
        continue-on-error: true
