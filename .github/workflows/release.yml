name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.21'

jobs:
  # Create GitHub release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
          else
            CHANGES=$(git log --pretty=format:"- %s" HEAD)
          fi

          # Write changelog to file
          cat > CHANGELOG.md << EOF
          ## Changes in ${{ steps.get_version.outputs.tag_name }}

          $CHANGES

          ## What's Changed
          - Centralized configuration system
          - Improved test reliability
          - Enhanced Docker support
          - Security improvements
          - Documentation updates
          EOF

          echo "changelog_file=CHANGELOG.md" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          release_name: Release ${{ steps.get_version.outputs.tag_name }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

  # Build and attach release artifacts
  build-artifacts:
    runs-on: ubuntu-latest
    needs: create-release

    strategy:
      matrix:
        include:
          - service: serviceA
            platform: linux/amd64
            arch: amd64
          - service: serviceB
            platform: linux/amd64
            arch: amd64
          - service: pdf-generator
            platform: linux/amd64
            arch: amd64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.service != 'pdf-generator'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        if: matrix.service == 'pdf-generator'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      # Build Node.js services
      - name: Build Node.js service
        if: matrix.service != 'pdf-generator'
        run: |
          npm ci --legacy-peer-deps
          npx nx build ${{ matrix.service }}

          # Create distribution archive
          cd ${{ matrix.service }}/dist
          tar -czf ../../${{ matrix.service }}-${{ needs.create-release.outputs.tag_name }}-${{ matrix.arch }}.tar.gz .
          cd ../..

      # Build Go service
      - name: Build Go service
        if: matrix.service == 'pdf-generator'
        run: |
          cd pdf-generator
          CGO_ENABLED=0 GOOS=linux GOARCH=${{ matrix.arch }} go build -a -installsuffix cgo -o pdf-generator main.go
          tar -czf ../pdf-generator-${{ needs.create-release.outputs.tag_name }}-${{ matrix.arch }}.tar.gz pdf-generator
          cd ..

      # Upload release asset
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.service }}-${{ needs.create-release.outputs.tag_name }}-${{ matrix.arch }}.tar.gz
          asset_name: ${{ matrix.service }}-${{ needs.create-release.outputs.tag_name }}-${{ matrix.arch }}.tar.gz
          asset_content_type: application/gzip

  # Deploy Docker images with release tags
  deploy-images:
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [serviceA, serviceB, pdf-generator]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service == 'pdf-generator' && './pdf-generator' || '.' }}
          file: ${{ matrix.service == 'pdf-generator' && './pdf-generator/Dockerfile' || format('./{0}/Dockerfile', matrix.service) }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.service }}:${{ needs.create-release.outputs.tag_name }}
            ghcr.io/${{ github.repository }}/${{ matrix.service }}:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Send notifications
  notify:
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts, deploy-images]
    if: always()

    steps:
      - name: Send success notification
        if: needs.create-release.result == 'success' && needs.build-artifacts.result == 'success' && needs.deploy-images.result == 'success'
        run: |
          echo "‚úÖ Release ${{ needs.create-release.outputs.tag_name }} completed successfully!"
          echo "üê≥ Docker images pushed to GitHub Container Registry"
          echo "üì¶ Release artifacts uploaded to GitHub Releases"

      - name: Send failure notification
        if: needs.create-release.result == 'failure' || needs.build-artifacts.result == 'failure' || needs.deploy-images.result == 'failure'
        run: |
          echo "‚ùå Release ${{ needs.create-release.outputs.tag_name }} failed!"
          echo "Please check the workflow logs for details."
