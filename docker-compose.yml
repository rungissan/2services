version: '3.8'

services:
  servicea:
    build:
      context: .
      dockerfile: serviceA/Dockerfile
      target: production
    container_name: two-services-servicea
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_TIMESERIES_HOST=redis-timeseries
      - REDIS_TIMESERIES_PORT=6379
      - REDIS_PUBSUB_HOST=redis-pubsub
      - REDIS_PUBSUB_PORT=6379
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_USERNAME=admin
      - MONGO_PASSWORD=password
      - MONGO_DATABASE=two-services
      - MONGO_AUTH_SOURCE=admin
      - MONGO_CONNECTION_STRING=mongodb://admin:password@mongodb:27017/two-services?authSource=admin
      - REDIS_CONNECTION_STRING=redis://redis:6379/0
      - REDIS_TIMESERIES_CONNECTION_STRING=redis://redis-timeseries:6379/0
      - REDIS_PUBSUB_CONNECTION_STRING=redis://redis-pubsub:6379/0
    env_file:
      - .env
    networks:
      - microservices-network
    depends_on:
      - mongodb
      - redis
      - redis-pubsub
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  serviceb:
    build:
      context: .
      dockerfile: serviceB/Dockerfile
      target: production
    container_name: two-services-serviceb
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_TIMESERIES_HOST=redis-timeseries
      - REDIS_TIMESERIES_PORT=6379
      - REDIS_PUBSUB_HOST=redis-pubsub
      - REDIS_PUBSUB_PORT=6379
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_USERNAME=admin
      - MONGO_PASSWORD=password
      - MONGO_DATABASE=two-services
      - MONGO_AUTH_SOURCE=admin
      - MONGO_CONNECTION_STRING=mongodb://admin:password@mongodb:27017/two-services?authSource=admin
      - REDIS_CONNECTION_STRING=redis://redis:6379/0
      - REDIS_TIMESERIES_CONNECTION_STRING=redis://redis-timeseries:6379/0
      - REDIS_PUBSUB_CONNECTION_STRING=redis://redis-pubsub:6379/0
    env_file:
      - .env
    networks:
      - microservices-network
    depends_on:
      - mongodb
      - redis
      - redis-pubsub
      - redis-timeseries
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Data Services
  mongodb:
    image: mongo:7.0
    container_name: two-services-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=two-services
    volumes:
      - mongodb-data:/data/db
      - ./docker/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7.2-alpine
    container_name: two-services-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  redis-timeseries:
    image: redislabs/redistimeseries:latest
    container_name: two-services-redis-timeseries
    ports:
      - "6380:6379"
    command: redis-server --loadmodule /usr/lib/redis/modules/redistimeseries.so --appendonly yes
    volumes:
      - redis-timeseries-data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  redis-pubsub:
    image: redis:7.2-alpine
    container_name: two-services-redis-pubsub
    ports:
      - "6381:6379"
    command: redis-server
    volumes:
      - redis-pubsub-data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  pdf-generator:
    build:
      context: ./pdf-generator
      dockerfile: Dockerfile
    container_name: two-services-pdf-generator
    ports:
      - "50051:50051"
    environment:
      - GRPC_PORT=50051
      - REDIS_TIMESERIES_ADDR=redis-timeseries:6379
    networks:
      - microservices-network
    depends_on:
      - redis-timeseries
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50051"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mongodb-data:
    driver: local
  redis-data:
    driver: local
  redis-timeseries-data:
    driver: local
  redis-pubsub-data:
    driver: local

networks:
  microservices-network:
    driver: bridge
